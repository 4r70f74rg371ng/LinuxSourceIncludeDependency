<?xml version="1.0" encoding="UTF-8" ?>
<results version="2">
    <cppcheck version="1.82" />
    <errors>
        <error id="redundantCondition" severity="style" msg="Redundant condition: If &apos;EXPR == &apos;:&apos;&apos;, the comparison &apos;EXPR&apos; is always true." verbose="Redundant condition: If &apos;EXPR == &apos;:&apos;&apos;, the comparison &apos;EXPR&apos; is always true." cwe="398">
            <location file0="..\..\Common.c" file="..\..\Common.c" line="53" />
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: If &apos;EXPR == &apos;.&apos;&apos;, the comparison &apos;EXPR&apos; is always true." verbose="Redundant condition: If &apos;EXPR == &apos;.&apos;&apos;, the comparison &apos;EXPR&apos; is always true." cwe="398">
            <location file0="..\..\Common.c" file="..\..\Common.c" line="81" />
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &apos;||&apos;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398">
            <location file0="..\..\Common.c" file="..\..\Common.c" line="130" />
            <location file0="..\..\Common.c" file="..\..\Common.c" line="130" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len1&apos; can be reduced." verbose="The scope of the variable &apos;len1&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Common.c" file="..\..\Common.c" line="10" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len2&apos; can be reduced." verbose="The scope of the variable &apos;len2&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Common.c" file="..\..\Common.c" line="10" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;top&apos; can be reduced." verbose="The scope of the variable &apos;top&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Common.c" file="..\..\Common.c" line="11" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;backtop&apos; can be reduced." verbose="The scope of the variable &apos;backtop&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Common.c" file="..\..\Common.c" line="11" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Common.c" file="..\..\Common.c" line="12" />
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;void *&apos;." verbose="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;void *&apos;." cwe="686">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="433" />
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;void *&apos;." verbose="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;void *&apos;." cwe="686">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="444" />
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;void *&apos;." verbose="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;void *&apos;." cwe="686">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="446" />
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;void *&apos;." verbose="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;void *&apos;." cwe="686">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="459" />
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;void *&apos;." verbose="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;void *&apos;." cwe="686">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="461" />
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;void *&apos;." verbose="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;void *&apos;." cwe="686">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="474" />
        </error>
        <error id="invalidPrintfArgType_uint" severity="warning" msg="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;void *&apos;." verbose="%X in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is &apos;void *&apos;." cwe="686">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="476" />
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." verbose="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." cwe="476">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="5" info="Null pointer dereference" />
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="4" info="Assuming that condition &apos;(linked_list)!=((void*)0)&apos; is not redundant" />
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." verbose="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." cwe="476">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="6" info="Null pointer dereference" />
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="4" info="Assuming that condition &apos;(linked_list)!=((void*)0)&apos; is not redundant" />
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." verbose="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." cwe="476">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="7" info="Null pointer dereference" />
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="4" info="Assuming that condition &apos;(linked_list)!=((void*)0)&apos; is not redundant" />
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." verbose="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." cwe="476">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="8" info="Null pointer dereference" />
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="4" info="Assuming that condition &apos;(linked_list)!=((void*)0)&apos; is not redundant" />
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." verbose="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." cwe="476">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="9" info="Null pointer dereference" />
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="4" info="Assuming that condition &apos;(linked_list)!=((void*)0)&apos; is not redundant" />
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." verbose="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." cwe="476">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="10" info="Null pointer dereference" />
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="4" info="Assuming that condition &apos;(linked_list)!=((void*)0)&apos; is not redundant" />
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." verbose="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." cwe="476">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="11" info="Null pointer dereference" />
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="4" info="Assuming that condition &apos;(linked_list)!=((void*)0)&apos; is not redundant" />
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." verbose="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." cwe="476">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="19" info="Null pointer dereference" />
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="18" info="Assuming that condition &apos;(linked_list)!=((void*)0)&apos; is not redundant" />
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." verbose="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." cwe="476">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="20" info="Null pointer dereference" />
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="18" info="Assuming that condition &apos;(linked_list)!=((void*)0)&apos; is not redundant" />
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." verbose="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." cwe="476">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="21" info="Null pointer dereference" />
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="18" info="Assuming that condition &apos;(linked_list)!=((void*)0)&apos; is not redundant" />
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." verbose="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." cwe="476">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="22" info="Null pointer dereference" />
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="18" info="Assuming that condition &apos;(linked_list)!=((void*)0)&apos; is not redundant" />
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." verbose="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." cwe="476">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="24" info="Null pointer dereference" />
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="18" info="Assuming that condition &apos;(linked_list)!=((void*)0)&apos; is not redundant" />
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." verbose="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." cwe="476">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="27" info="Null pointer dereference" />
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="18" info="Assuming that condition &apos;(linked_list)!=((void*)0)&apos; is not redundant" />
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." verbose="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." cwe="476">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="29" info="Null pointer dereference" />
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="18" info="Assuming that condition &apos;(linked_list)!=((void*)0)&apos; is not redundant" />
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." verbose="Either the condition &apos;(linked_list)!=((void*)0)&apos; is redundant or there is possible null pointer dereference: linked_list." cwe="476">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="30" info="Null pointer dereference" />
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="18" info="Assuming that condition &apos;(linked_list)!=((void*)0)&apos; is not redundant" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bret&apos; can be reduced." verbose="The scope of the variable &apos;bret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="39" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bret&apos; can be reduced." verbose="The scope of the variable &apos;bret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="105" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bret&apos; can be reduced." verbose="The scope of the variable &apos;bret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="211" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bret&apos; can be reduced." verbose="The scope of the variable &apos;bret&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="250" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="292" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="373" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\DataStructure\CustomableSimpleLinkedList.c" file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="401" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;found&apos; can be reduced." verbose="The scope of the variable &apos;found&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\DataStructure\PathGraph.c" file="..\..\DataStructure\PathGraph.c" line="133" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;found&apos; can be reduced." verbose="The scope of the variable &apos;found&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\DataStructure\PathGraph.c" file="..\..\DataStructure\PathGraph.c" line="215" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;id_start&apos; can be reduced." verbose="The scope of the variable &apos;id_start&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\DataStructure\PathGraph.c" file="..\..\DataStructure\PathGraph.c" line="216" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;id_end&apos; can be reduced." verbose="The scope of the variable &apos;id_end&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\DataStructure\PathGraph.c" file="..\..\DataStructure\PathGraph.c" line="216" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\DataStructure\PathGraph.c" file="..\..\DataStructure\PathGraph.c" line="264" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\DataStructure\PathGraph.c" file="..\..\DataStructure\PathGraph.c" line="264" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;escapedpath&apos; can be reduced." verbose="The scope of the variable &apos;escapedpath&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\DataStructure\PathGraph.c" file="..\..\DataStructure\PathGraph.c" line="266" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;escapedfile&apos; can be reduced." verbose="The scope of the variable &apos;escapedfile&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\DataStructure\PathGraph.c" file="..\..\DataStructure\PathGraph.c" line="266" />
        </error>
        <error id="AssignmentAddressToInteger" severity="portability" msg="Assigning a pointer to an integer is not portable." verbose="Assigning a pointer to an integer (int/long/etc) is not portable across different platforms and compilers. For example in 32-bit Windows and linux they are same width, but in 64-bit Windows and linux they are of different width. In worst case you end up assigning 64-bit address to 32-bit integer. The safe way is to store addresses only in pointer types (or typedefs like uintptr_t)." cwe="758">
            <location file0="..\..\Lexer\CLexerFile.c" file="..\..\Lexer\CLexerFile.c" line="13" />
        </error>
        <error id="AssignmentAddressToInteger" severity="portability" msg="Assigning a pointer to an integer is not portable." verbose="Assigning a pointer to an integer (int/long/etc) is not portable across different platforms and compilers. For example in 32-bit Windows and linux they are same width, but in 64-bit Windows and linux they are of different width. In worst case you end up assigning 64-bit address to 32-bit integer. The safe way is to store addresses only in pointer types (or typedefs like uintptr_t)." cwe="758">
            <location file0="..\..\Lexer\CLexerFile.c" file="..\..\Lexer\CLexerFile.c" line="179" />
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;fp&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;fp&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file0="..\..\Lexer\CLexerFile.c" file="..\..\Lexer\CLexerFile.c" line="17" />
            <location file0="..\..\Lexer\CLexerFile.c" file="..\..\Lexer\CLexerFile.c" line="12" />
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;fp&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;fp&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file0="..\..\Lexer\CLexerFile.c" file="..\..\Lexer\CLexerFile.c" line="183" />
            <location file0="..\..\Lexer\CLexerFile.c" file="..\..\Lexer\CLexerFile.c" line="178" />
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;result&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;result&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file0="..\..\Lexer\CLexerFile.c" file="..\..\Lexer\CLexerFile.c" line="347" />
            <location file0="..\..\Lexer\CLexerFile.c" file="..\..\Lexer\CLexerFile.c" line="345" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tokensmap&apos; can be reduced." verbose="The scope of the variable &apos;tokensmap&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Lexer\CLexerFile.c" file="..\..\Lexer\CLexerFile.c" line="11" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Lexer\CLexerFile.c" file="..\..\Lexer\CLexerFile.c" line="14" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ext&apos; can be reduced." verbose="The scope of the variable &apos;ext&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Lexer\CLexerFile.c" file="..\..\Lexer\CLexerFile.c" line="62" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Lexer\CLexerFile.c" file="..\..\Lexer\CLexerFile.c" line="180" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ext&apos; can be reduced." verbose="The scope of the variable &apos;ext&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Lexer\CLexerFile.c" file="..\..\Lexer\CLexerFile.c" line="226" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;spath&apos; can be reduced." verbose="The scope of the variable &apos;spath&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Lexer\CLexerFile.c" file="..\..\Lexer\CLexerFile.c" line="344" />
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;localvalue&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;localvalue&apos; is reassigned a value before the old one has been used." cwe="563">
            <location file0="..\..\Lexer\CLexerLexer.c" file="..\..\Lexer\CLexerLexer.c" line="75" />
            <location file0="..\..\Lexer\CLexerLexer.c" file="..\..\Lexer\CLexerLexer.c" line="72" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmpc&apos; can be reduced." verbose="The scope of the variable &apos;tmpc&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Lexer\CLexerLexer.c" file="..\..\Lexer\CLexerLexer.c" line="118" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;found&apos; can be reduced." verbose="The scope of the variable &apos;found&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Lexer\CLexerLexer.c" file="..\..\Lexer\CLexerLexer.c" line="119" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Lexer\CLexerLexer.c" file="..\..\Lexer\CLexerLexer.c" line="120" />
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: i" verbose="Unused variable: i" cwe="563">
            <location file0="..\..\Lexer\CLexerLexer.c" file="..\..\Lexer\CLexerLexer.c" line="71" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Lexer\CLexerResult.c" file="..\..\Lexer\CLexerResult.c" line="54" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;len&apos; can be reduced." verbose="The scope of the variable &apos;len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Lexer\CLexerTokenStringMap.c" file="..\..\Lexer\CLexerTokenStringMap.c" line="9" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Lexer\CLexerTokens.c" file="..\..\Lexer\CLexerTokens.c" line="99" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;status&apos; can be reduced." verbose="The scope of the variable &apos;status&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Lexer\CLexerTokens.c" file="..\..\Lexer\CLexerTokens.c" line="100" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Lexer\CLexerTokens.c" file="..\..\Lexer\CLexerTokens.c" line="147" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;status&apos; can be reduced." verbose="The scope of the variable &apos;status&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Lexer\CLexerTokens.c" file="..\..\Lexer\CLexerTokens.c" line="148" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Lexer\CLexerTokens.c" file="..\..\Lexer\CLexerTokens.c" line="224" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Lexer\CLexerTokens.c" file="..\..\Lexer\CLexerTokens.c" line="281" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Lexer\CLexerTokens.c" file="..\..\Lexer\CLexerTokens.c" line="360" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;count&apos; can be reduced." verbose="The scope of the variable &apos;count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Lexer\CLexerTokens.c" file="..\..\Lexer\CLexerTokens.c" line="361" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;status&apos; can be reduced." verbose="The scope of the variable &apos;status&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Lexer\CLexerTokens.c" file="..\..\Lexer\CLexerTokens.c" line="362" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Lexer\CLexerTokens.c" file="..\..\Lexer\CLexerTokens.c" line="509" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;count&apos; can be reduced." verbose="The scope of the variable &apos;count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Lexer\CLexerTokens.c" file="..\..\Lexer\CLexerTokens.c" line="510" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;status&apos; can be reduced." verbose="The scope of the variable &apos;status&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Lexer\CLexerTokens.c" file="..\..\Lexer\CLexerTokens.c" line="511" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;is_number&apos; can be reduced." verbose="The scope of the variable &apos;is_number&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\Lexer\CLexerTokens.c" file="..\..\Lexer\CLexerTokens.c" line="658" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;c&apos; can be reduced." verbose="The scope of the variable &apos;c&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\main.c" file="..\..\main.c" line="26" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\main.c" file="..\..\main.c" line="26" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\main.c" file="..\..\main.c" line="129" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\main.c" file="..\..\main.c" line="214" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\main.c" file="..\..\main.c" line="266" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\main.c" file="..\..\main.c" line="266" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;escapedpath&apos; can be reduced." verbose="The scope of the variable &apos;escapedpath&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\main.c" file="..\..\main.c" line="268" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;escapedfile&apos; can be reduced." verbose="The scope of the variable &apos;escapedfile&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\main.c" file="..\..\main.c" line="268" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;id&apos; can be reduced." verbose="The scope of the variable &apos;id&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\main.c" file="..\..\main.c" line="269" />
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;changed&apos; can be reduced." verbose="The scope of the variable &apos;changed&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398">
            <location file0="..\..\main.c" file="..\..\main.c" line="272" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;GetNodeIdFromSplit&apos; is never used." verbose="The function &apos;GetNodeIdFromSplit&apos; is never used." cwe="561">
            <location file="..\..\DataStructure\PathGraph.c" line="109" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SimpleLinkedList_AttachHead&apos; is never used." verbose="The function &apos;SimpleLinkedList_AttachHead&apos; is never used." cwe="561">
            <location file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="103" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SimpleLinkedList_ConvertArray&apos; is never used." verbose="The function &apos;SimpleLinkedList_ConvertArray&apos; is never used." cwe="561">
            <location file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="290" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SimpleLinkedList_ConvertArrayAndCleanup&apos; is never used." verbose="The function &apos;SimpleLinkedList_ConvertArrayAndCleanup&apos; is never used." cwe="561">
            <location file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="371" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SimpleLinkedList_Delete&apos; is never used." verbose="The function &apos;SimpleLinkedList_Delete&apos; is never used." cwe="561">
            <location file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="311" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SimpleLinkedList_GetAfter&apos; is never used." verbose="The function &apos;SimpleLinkedList_GetAfter&apos; is never used." cwe="561">
            <location file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="202" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SimpleLinkedList_GetBefore&apos; is never used." verbose="The function &apos;SimpleLinkedList_GetBefore&apos; is never used." cwe="561">
            <location file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="195" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SimpleLinkedList_GetById&apos; is never used." verbose="The function &apos;SimpleLinkedList_GetById&apos; is never used." cwe="561">
            <location file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="413" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SimpleLinkedList_GetByIndex&apos; is never used." verbose="The function &apos;SimpleLinkedList_GetByIndex&apos; is never used." cwe="561">
            <location file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="399" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SimpleLinkedList_GetEnd&apos; is never used." verbose="The function &apos;SimpleLinkedList_GetEnd&apos; is never used." cwe="561">
            <location file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="174" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SimpleLinkedList_GetFirst&apos; is never used." verbose="The function &apos;SimpleLinkedList_GetFirst&apos; is never used." cwe="561">
            <location file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="167" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SimpleLinkedList_GetLast&apos; is never used." verbose="The function &apos;SimpleLinkedList_GetLast&apos; is never used." cwe="561">
            <location file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="188" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SimpleLinkedList_GetNext&apos; is never used." verbose="The function &apos;SimpleLinkedList_GetNext&apos; is never used." cwe="561">
            <location file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="181" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SimpleLinkedList_Initial&apos; is never used." verbose="The function &apos;SimpleLinkedList_Initial&apos; is never used." cwe="561">
            <location file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="3" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SimpleLinkedList_InsertAfter&apos; is never used." verbose="The function &apos;SimpleLinkedList_InsertAfter&apos; is never used." cwe="561">
            <location file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="209" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SimpleLinkedList_InsertBefore&apos; is never used." verbose="The function &apos;SimpleLinkedList_InsertBefore&apos; is never used." cwe="561">
            <location file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="248" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SimpleLinkedList_PrintByAfter&apos; is never used." verbose="The function &apos;SimpleLinkedList_PrintByAfter&apos; is never used." cwe="561">
            <location file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="439" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SimpleLinkedList_PrintByNext&apos; is never used." verbose="The function &apos;SimpleLinkedList_PrintByNext&apos; is never used." cwe="561">
            <location file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="425" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SimpleLinkedList_PrintReverseByBefore&apos; is never used." verbose="The function &apos;SimpleLinkedList_PrintReverseByBefore&apos; is never used." cwe="561">
            <location file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="468" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SimpleLinkedList_PrintReverseByLast&apos; is never used." verbose="The function &apos;SimpleLinkedList_PrintReverseByLast&apos; is never used." cwe="561">
            <location file="..\..\DataStructure\CustomableSimpleLinkedList.c" line="453" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;WriteDotFileGraph&apos; is never used." verbose="The function &apos;WriteDotFileGraph&apos; is never used." cwe="561">
            <location file="..\..\DataStructure\PathGraph.c" line="261" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;clexer_enum_cfile_directory_return&apos; is never used." verbose="The function &apos;clexer_enum_cfile_directory_return&apos; is never used." cwe="561">
            <location file="..\..\Lexer\CLexerFile.c" line="341" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;clexer_handle_token&apos; is never used." verbose="The function &apos;clexer_handle_token&apos; is never used." cwe="561">
            <location file="..\..\Lexer\CLexerLexer.c" line="69" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;clexer_print_escape&apos; is never used." verbose="The function &apos;clexer_print_escape&apos; is never used." cwe="561">
            <location file="..\..\Lexer\CLexerLexer.c" line="44" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;clexer_result_dir_cleanup&apos; is never used." verbose="The function &apos;clexer_result_dir_cleanup&apos; is never used." cwe="561">
            <location file="..\..\Lexer\CLexerResult.c" line="77" />
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;handle_preprocessor2&apos; is never used." verbose="The function &apos;handle_preprocessor2&apos; is never used." cwe="561">
            <location file="..\..\main.c" line="206" />
        </error>
        <error id="missingIncludeSystem" severity="information" msg="Cppcheck cannot find all the include files (use --check-config for details)" verbose="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config." />
    </errors>
</results>
